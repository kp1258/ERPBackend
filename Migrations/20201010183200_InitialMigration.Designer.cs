// <auto-generated />
using System;
using ERPBackend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ERPBackend.Migrations
{
    [DbContext(typeof(ERPContext))]
    [Migration("20201010183200_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ERPBackend.Entities.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalesmanId")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.HasIndex("AddressId");

                    b.HasIndex("SalesmanId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.CustomOrderItem", b =>
                {
                    b.Property<int>("CustomOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomOrderItemId");

                    b.HasIndex("CustomProductId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomOrderDetails");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.CustomProduct", b =>
                {
                    b.Property<int>("CustomProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnologistId")
                        .HasColumnType("int");

                    b.HasKey("CustomProductId");

                    b.HasIndex("TechnologistId");

                    b.ToTable("CustomProducts");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.MaterialItem", b =>
                {
                    b.Property<int>("MaterialItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MaterialItemId");

                    b.HasIndex("MaterialId")
                        .IsUnique();

                    b.ToTable("MaterialWarehouse");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FulfillmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PlacingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WarehousemanId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("WarehousemanId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardOrderItem", b =>
                {
                    b.Property<int>("StandardOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StandardProductId")
                        .HasColumnType("int");

                    b.HasKey("StandardOrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StandardProductId");

                    b.ToTable("StandardOrderDetails");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardProduct", b =>
                {
                    b.Property<int>("StandardProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Dimensions")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("StandardProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("StandardProductId");

                    b.HasIndex("StandardProductCategoryId");

                    b.ToTable("StandardProducts");

                    b.HasData(
                        new
                        {
                            StandardProductId = 1,
                            Dimensions = "100x100",
                            Name = "Produkt",
                            StandardProductCategoryId = 1
                        });
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardProductCategory", b =>
                {
                    b.Property<int>("StandardProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("StandardProductCategoryId");

                    b.ToTable("StandardProductCategories");

                    b.HasData(
                        new
                        {
                            StandardProductCategoryId = 1,
                            CategoryName = "Nóż"
                        },
                        new
                        {
                            StandardProductCategoryId = 2,
                            CategoryName = "Sito"
                        },
                        new
                        {
                            StandardProductCategoryId = 3,
                            CategoryName = "Szarpak"
                        });
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardProductItem", b =>
                {
                    b.Property<int>("StandardProductItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StandardProductId")
                        .HasColumnType("int");

                    b.HasKey("StandardProductItemId");

                    b.HasIndex("StandardProductId")
                        .IsUnique();

                    b.ToTable("StandardProductWarehouse");
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Login = "jan_k",
                            Password = "password",
                            Role = "Administrator",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Anna",
                            LastName = "Nowak",
                            Login = "anna_n",
                            Password = "password",
                            Role = "Salesman",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = 3,
                            FirstName = "Andrzej",
                            LastName = "Malinowski",
                            Login = "andrzej_m",
                            Password = "password",
                            Role = "ProductionManager",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = 4,
                            FirstName = "Agata",
                            LastName = "Krzeszowska",
                            Login = "agata_k",
                            Password = "password",
                            Role = "Technologist",
                            Status = "Active"
                        },
                        new
                        {
                            UserId = 5,
                            FirstName = "Edward",
                            LastName = "Rak",
                            Login = "edward_r",
                            Password = "password",
                            Role = "Warehouseman",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.Client", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPBackend.Entities.Models.User", "Salesman")
                        .WithMany("Clients")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.CustomOrderItem", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.CustomProduct", "CustomProduct")
                        .WithMany("CustomOrderItems")
                        .HasForeignKey("CustomProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPBackend.Entities.Models.Order", "Order")
                        .WithMany("CustomOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.CustomProduct", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.User", "Technologist")
                        .WithMany("CustomProducts")
                        .HasForeignKey("TechnologistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.MaterialItem", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.Material", "Material")
                        .WithOne("MaterialItem")
                        .HasForeignKey("ERPBackend.Entities.Models.MaterialItem", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.Order", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPBackend.Entities.Models.User", "Salesman")
                        .WithMany("Salesmen")
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPBackend.Entities.Models.User", "Warehouseman")
                        .WithMany("Warehousemen")
                        .HasForeignKey("WarehousemanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardOrderItem", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.Order", "Order")
                        .WithMany("StandardOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERPBackend.Entities.Models.StandardProduct", "StandardProduct")
                        .WithMany("StandardOrderItem")
                        .HasForeignKey("StandardProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardProduct", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.StandardProductCategory", "StandardProductCategory")
                        .WithMany("StandardProducts")
                        .HasForeignKey("StandardProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERPBackend.Entities.Models.StandardProductItem", b =>
                {
                    b.HasOne("ERPBackend.Entities.Models.StandardProduct", "StandardProduct")
                        .WithOne("ProductItem")
                        .HasForeignKey("ERPBackend.Entities.Models.StandardProductItem", "StandardProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
